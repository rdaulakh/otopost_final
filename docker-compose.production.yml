version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-social-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ai-social-media
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./api/database/init:/docker-entrypoint-initdb.d
    networks:
      - ai-social-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: ai-social-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}

  # Backend API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ai-social-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/ai-social-media?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      TWITTER_API_KEY: ${TWITTER_API_KEY}
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      TIKTOK_CLIENT_KEY: ${TIKTOK_CLIENT_KEY}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
    ports:
      - "5000:5000"
    volumes:
      - ./api/uploads:/app/uploads
      - ./api/logs:/app/logs
    networks:
      - ai-social-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Frontend
  customer-frontend:
    build:
      context: ./customer-frontend
      dockerfile: Dockerfile
    container_name: ai-social-customer-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000/api
      VITE_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    networks:
      - ai-social-network
    depends_on:
      api:
        condition: service_healthy

  # Admin Panel
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: ai-social-admin-panel
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000/api
      VITE_WS_URL: ws://localhost:5000
    ports:
      - "3001:3000"
    networks:
      - ai-social-network
    depends_on:
      api:
        condition: service_healthy

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ai-social-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - ai-social-network
    depends_on:
      - api
      - customer-frontend
      - admin-panel

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-social-network:
    driver: bridge

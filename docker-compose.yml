version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  mongodb:
    image: mongo:7.0
    container_name: ai-social-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai-social-media
    volumes:
      - mongodb_data:/data/db
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: ai-social-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  chroma:
    image: chromadb/chroma:latest
    container_name: ai-social-chroma
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ai-social-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/ai-social-media?authSource=admin
      REDIS_URL: redis://redis:6379
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
    env_file:
      - .env
    volumes:
      - ./api/logs:/app/logs
      - ./api/uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AI AGENTS SERVICE
  # =============================================================================
  ai-agents:
    build:
      context: ./ai-agents
      dockerfile: Dockerfile
    container_name: ai-social-ai-agents
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/ai-social-media?authSource=admin
      REDIS_URL: redis://redis:6379
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
    env_file:
      - .env
    volumes:
      - ./ai-agents/logs:/app/logs
      - ./ai-agents/data:/app/data
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 60s
      timeout: 15s
      retries: 3

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  customer-frontend:
    build:
      context: ./customer-frontend
      dockerfile: Dockerfile
    container_name: ai-social-customer-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      VITE_API_BASE_URL: http://localhost:5000
      VITE_WS_URL: ws://localhost:5000
    volumes:
      - ./customer-frontend/dist:/app/dist
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: ai-social-admin-panel
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE_URL: http://localhost:5000
      VITE_WS_URL: ws://localhost:5000
    volumes:
      - ./admin-panel/dist:/app/dist
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: ai-social-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - customer-frontend
      - admin-panel
    networks:
      - ai-social-network

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  ai-social-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


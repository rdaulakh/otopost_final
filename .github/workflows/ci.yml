name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  MONGODB_VERSION: '6.0'
  REDIS_VERSION: '7.0'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend-api
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend-api
        npm run test:coverage
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: backend-api/coverage/lcov.info
        flags: backend

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [customer-frontend, admin-panel ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.app }}/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd ${{ matrix.app }}
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd ${{ matrix.app }}
        npm run test:coverage
    
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.app }}/coverage/lcov.info
        flags: ${{ matrix.app }}

  # AI Agents Tests
  ai-agents-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ai-agents/requirements.txt
    
    - name: Install AI Agents Dependencies
      run: |
        cd ai-agents
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run AI Agents Tests
      run: |
        cd ai-agents
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload AI Agents Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ai-agents/coverage.xml
        flags: ai-agents

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        cd backend-api && npm ci
        cd ../customer-frontend && npm ci
        cd ../admin-panel && npm ci
    
    - name: Start Services
      run: |
        cd backend-api && npm start &
        cd ../customer-frontend && npm run build && npm run preview &
        cd ../admin-panel && npm run build && npm run preview &
        sleep 30
    
    - name: Run Integration Tests
      run: |
        cd testing
        npm ci
        npm run test:integration
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: testing/reports/

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        cd backend-api && npm ci
        cd ../customer-frontend && npm ci
        cd ../admin-panel && npm ci
        cd ../testing && npm ci
    
    - name: Start Services
      run: |
        cd backend-api && npm start &
        cd ../customer-frontend && npm run build && npm run preview &
        cd ../admin-panel && npm run build && npm run preview &
        sleep 30
    
    - name: Run E2E Tests
      run: |
        cd testing
        npm run test:e2e
    
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: testing/reports/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Audit
      run: |
        cd backend-api && npm audit --audit-level moderate
        cd ../customer-frontend && npm audit --audit-level moderate
        cd ../admin-panel && npm audit --audit-level moderate
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ai-agents-tests, integration-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        cd backend-api && npm ci
        cd ../customer-frontend && npm ci
        cd ../admin-panel && npm ci
    
    - name: Build Applications
      run: |
        cd backend-api && npm run build
        cd ../customer-frontend && npm run build
        cd ../admin-panel && npm run build
    
    - name: Build Docker Images
      run: |
        docker build -t ai-social-platform-backend -f docker/Dockerfile.backend .
        docker build -t ai-social-platform-frontend -f docker/Dockerfile.frontend .
        docker build -t ai-social-platform-admin -f docker/Dockerfile.admin .
        docker build -t ai-social-platform-ai-agents -f docker/Dockerfile.ai-agents .
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
    
    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here
    
    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here

